import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

// ACCORD Brand Color scheme
const COLORS = {
  primary: '#008cf7', // ACCORD Blue
  secondary: '#6b7280', // Gray
  success: '#059669', // Green
  warning: '#f59e0b', // Orange
  danger: '#dc2626', // Red
  text: '#000000', // Black
  lightGray: '#f3f4f6',
  border: '#e5e7eb',
  white: '#ffffff'
};

export interface Report {
  _id: string;
  userId: {
    _id: string;
    firstName: string;
    lastName: string;
    email: string;
    employeeId?: string;
  };
  report?: string;
  filePath?: string;
  fileName?: string;
  fileUrl?: string;
  weekStart: string;
  weekEnd: string;
  status: 'pending' | 'approved' | 'rejected';
  adminNotes?: string | null;
  createdAt: string;
}

/**
 * Generate a comprehensive PDF report for all reports
 */
export async function generateReportsSummaryPDF(
  reports: Report[],
  adminName: string,
  filterStatus?: 'pending' | 'approved' | 'rejected' | 'all'
): Promise<void> {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  
  // Add logo
  try {
    const logoImg = await loadImage('/accordlogo.png');
    doc.addImage(logoImg, 'PNG', 15, 10, 40, 20);
  } catch (error) {
    console.error('Failed to load logo:', error);
  }

  // Header - Company Info
  doc.setFontSize(20);
  doc.setTextColor(COLORS.primary);
  doc.setFont('helvetica', 'bold');
  doc.text('ACCORD', pageWidth - 15, 20, { align: 'right' });
  
  doc.setFontSize(10);
  doc.setTextColor(COLORS.secondary);
  doc.setFont('helvetica', 'normal');
  doc.text('Field Activity Management System', pageWidth - 15, 26, { align: 'right' });
  
  // Title
  doc.setFontSize(18);
  doc.setTextColor(COLORS.text);
  doc.setFont('helvetica', 'bold');
  doc.text('Weekly Reports Summary', 15, 45);
  
  // Divider line
  doc.setDrawColor(COLORS.primary);
  doc.setLineWidth(0.5);
  doc.line(15, 48, pageWidth - 15, 48);
  
  // Report metadata
  doc.setFontSize(10);
  doc.setTextColor(COLORS.secondary);
  doc.setFont('helvetica', 'normal');
  doc.text(`Generated: ${new Date().toLocaleString('en-US', { 
    dateStyle: 'medium', 
    timeStyle: 'short' 
  })}`, 15, 55);
  doc.text(`Generated by: ${adminName}`, 15, 61);
  
  const filterText = filterStatus && filterStatus !== 'all' 
    ? `Status Filter: ${filterStatus.toUpperCase()}`
    : 'Status Filter: ALL';
  doc.text(filterText, pageWidth - 15, 55, { align: 'right' });
  doc.text(`Total Reports: ${reports.length}`, pageWidth - 15, 61, { align: 'right' });

  // Summary statistics box
  doc.setFillColor(COLORS.lightGray);
  doc.roundedRect(15, 68, pageWidth - 30, 25, 2, 2, 'F');
  
  doc.setFontSize(9);
  doc.setTextColor(COLORS.text);
  doc.setFont('helvetica', 'bold');
  doc.text('Report Statistics:', 20, 77);
  
  const pendingCount = reports.filter(r => r.status === 'pending').length;
  const approvedCount = reports.filter(r => r.status === 'approved').length;
  const rejectedCount = reports.filter(r => r.status === 'rejected').length;
  
  doc.setFont('helvetica', 'normal');
  doc.text(`• Pending: ${pendingCount}`, 20, 83);
  doc.text(`• Approved: ${approvedCount}`, 70, 83);
  doc.text(`• Rejected: ${rejectedCount}`, 120, 83);

  // Reports table
  let yPos = 100;
  
  doc.setFontSize(12);
  doc.setTextColor(COLORS.primary);
  doc.setFont('helvetica', 'bold');
  doc.text('Reports Overview', 15, yPos);
  
  yPos += 5;

  // Prepare table data
  const tableData = reports.map((report, index) => {
    const weekRange = `${new Date(report.weekStart).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${new Date(report.weekEnd).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`;
    
    const statusColor = 
      report.status === 'approved' ? COLORS.success :
      report.status === 'rejected' ? COLORS.danger :
      COLORS.warning;
    
    return [
      (index + 1).toString(),
      `${report.userId.firstName} ${report.userId.lastName}`,
      report.userId.email,
      weekRange,
      report.status.toUpperCase(),
      report.adminNotes || 'N/A',
      new Date(report.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
    ];
  });

  autoTable(doc, {
    startY: yPos,
    head: [['#', 'Staff Name', 'Email', 'Week', 'Status', 'Admin Notes', 'Submitted']],
    body: tableData,
    theme: 'grid',
    headStyles: {
      fillColor: COLORS.primary,
      textColor: '#ffffff',
      fontSize: 9,
      fontStyle: 'bold',
      halign: 'left'
    },
    bodyStyles: {
      fontSize: 8,
      textColor: COLORS.text
    },
    alternateRowStyles: {
      fillColor: COLORS.lightGray
    },
    columnStyles: {
      0: { cellWidth: 10, halign: 'center' },
      1: { cellWidth: 35 },
      2: { cellWidth: 45 },
      3: { cellWidth: 28 },
      4: { cellWidth: 20, halign: 'center', fontStyle: 'bold' },
      5: { cellWidth: 35 },
      6: { cellWidth: 20, halign: 'center' }
    },
    margin: { left: 15, right: 15 },
    didParseCell: (data) => {
      // Color code status column
      if (data.column.index === 4 && data.section === 'body') {
        const status = data.cell.raw as string;
        if (status.includes('APPROVED')) {
          data.cell.styles.textColor = COLORS.success;
        } else if (status.includes('REJECTED')) {
          data.cell.styles.textColor = COLORS.danger;
        } else if (status.includes('PENDING')) {
          data.cell.styles.textColor = COLORS.warning;
        }
      }
    }
  });

  // Footer on each page
  const totalPages = (doc as any).internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(COLORS.secondary);
    doc.setFont('helvetica', 'italic');
    doc.text(
      `Page ${i} of ${totalPages}`,
      pageWidth / 2,
      pageHeight - 10,
      { align: 'center' }
    );
    doc.text(
      'ACCORD - Confidential',
      15,
      pageHeight - 10
    );
    doc.text(
      new Date().toLocaleDateString(),
      pageWidth - 15,
      pageHeight - 10,
      { align: 'right' }
    );
  }

  // Save PDF
  const filterSuffix = filterStatus && filterStatus !== 'all' ? `_${filterStatus}` : '';
  const fileName = `ACCORD_Reports_Summary${filterSuffix}_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
}

/**
 * Generate detailed PDF report for a single report entry
 */
export async function generateIndividualReportPDF(
  report: Report,
  adminName: string
): Promise<void> {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  
  // Add logo
  try {
    const logoImg = await loadImage('/accordlogo.png');
    doc.addImage(logoImg, 'PNG', 15, 10, 40, 20);
  } catch (error) {
    console.error('Failed to load logo:', error);
  }

  // Header
  doc.setFontSize(20);
  doc.setTextColor(COLORS.primary);
  doc.setFont('helvetica', 'bold');
  doc.text('ACCORD', pageWidth - 15, 20, { align: 'right' });
  
  doc.setFontSize(10);
  doc.setTextColor(COLORS.secondary);
  doc.setFont('helvetica', 'normal');
  doc.text('Field Activity Management System', pageWidth - 15, 26, { align: 'right' });
  
  // Title
  doc.setFontSize(18);
  doc.setTextColor(COLORS.text);
  doc.setFont('helvetica', 'bold');
  doc.text('Weekly Report Details', 15, 45);
  
  // Divider
  doc.setDrawColor(COLORS.primary);
  doc.setLineWidth(0.5);
  doc.line(15, 48, pageWidth - 15, 48);
  
  // Staff information box
  const statusColor = 
    report.status === 'approved' ? COLORS.success :
    report.status === 'rejected' ? COLORS.danger :
    COLORS.warning;
  
  doc.setFillColor(statusColor);
  doc.roundedRect(15, 55, pageWidth - 30, 35, 2, 2, 'F');
  
  doc.setFontSize(14);
  doc.setTextColor('#ffffff');
  doc.setFont('helvetica', 'bold');
  doc.text(
    `${report.userId.firstName} ${report.userId.lastName}`,
    20,
    65
  );
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  if (report.userId.employeeId) {
    doc.text(`Employee ID: ${report.userId.employeeId}`, 20, 72);
  }
  doc.text(`Email: ${report.userId.email}`, 20, 78);
  doc.text(
    `Week: ${new Date(report.weekStart).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${new Date(report.weekEnd).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`,
    pageWidth - 20,
    65,
    { align: 'right' }
  );
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text(
    `Status: ${report.status.toUpperCase()}`,
    pageWidth - 20,
    78,
    { align: 'right' }
  );
  doc.text(
    `Submitted: ${new Date(report.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`,
    pageWidth - 20,
    85,
    { align: 'right' }
  );

  // Report metadata
  let yPos = 100;
  doc.setFontSize(9);
  doc.setTextColor(COLORS.secondary);
  doc.setFont('helvetica', 'normal');
  doc.text(`Generated: ${new Date().toLocaleString('en-US', { dateStyle: 'medium', timeStyle: 'short' })}`, 15, yPos);
  doc.text(`Generated by: ${adminName}`, pageWidth - 15, yPos, { align: 'right' });

  // Report details section
  yPos += 15;
  doc.setFillColor(COLORS.lightGray);
  doc.roundedRect(15, yPos, pageWidth - 30, 45, 2, 2, 'F');
  
  doc.setFontSize(11);
  doc.setTextColor(COLORS.primary);
  doc.setFont('helvetica', 'bold');
  doc.text('Report Information', 20, yPos + 8);
  
  doc.setFontSize(9);
  doc.setTextColor(COLORS.text);
  doc.setFont('helvetica', 'normal');
  
  yPos += 16;
  doc.text(`• Report ID: ${report._id}`, 20, yPos);
  yPos += 6;
  doc.text(`• File Name: ${report.fileName || 'N/A'}`, 20, yPos);
  yPos += 6;
  doc.text(`• File Available: ${report.fileUrl ? 'Yes' : 'No'}`, 20, yPos);
  yPos += 6;
  doc.text(`• Submission Date: ${new Date(report.createdAt).toLocaleString()}`, 20, yPos);
  yPos += 6;
  doc.text(`• Current Status: ${report.status.toUpperCase()}`, 20, yPos);

  // Admin notes section (if available)
  if (report.adminNotes && report.adminNotes.trim()) {
    yPos += 15;
    doc.setFillColor('#fff3cd');
    doc.roundedRect(15, yPos, pageWidth - 30, 25, 2, 2, 'F');
    
    doc.setFontSize(10);
    doc.setTextColor(COLORS.text);
    doc.setFont('helvetica', 'bold');
    doc.text('Admin Notes:', 20, yPos + 7);
    
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(9);
    const splitNotes = doc.splitTextToSize(report.adminNotes, pageWidth - 40);
    doc.text(splitNotes, 20, yPos + 14);
    yPos += 25;
  }

  // Action log section
  yPos += 15;
  doc.setFontSize(12);
  doc.setTextColor(COLORS.primary);
  doc.setFont('helvetica', 'bold');
  doc.text('Report Timeline', 15, yPos);
  
  yPos += 5;

  const timelineData = [
    ['Event', 'Date/Time', 'Details'],
    ['Report Submitted', new Date(report.createdAt).toLocaleString(), `Submitted by ${report.userId.firstName} ${report.userId.lastName}`],
    ['Current Status', new Date().toLocaleString(), `Status: ${report.status.toUpperCase()}`]
  ];

  autoTable(doc, {
    startY: yPos,
    head: [timelineData[0]],
    body: timelineData.slice(1),
    theme: 'grid',
    headStyles: {
      fillColor: COLORS.primary,
      textColor: COLORS.white,
      fontSize: 9,
      fontStyle: 'bold'
    },
    bodyStyles: {
      fontSize: 8,
      textColor: COLORS.text
    },
    columnStyles: {
      0: { cellWidth: 40, fontStyle: 'bold' },
      1: { cellWidth: 50 },
      2: { cellWidth: 'auto' }
    },
    margin: { left: 15, right: 15 }
  });

  // Get position after table
  yPos = (doc as any).lastAutoTable.finalY + 15;

  // File information box
  if (yPos + 30 > pageHeight - 20) {
    doc.addPage();
    yPos = 20;
  }

  doc.setFillColor(COLORS.lightGray);
  doc.roundedRect(15, yPos, pageWidth - 30, 25, 2, 2, 'F');
  
  doc.setFontSize(11);
  doc.setTextColor(COLORS.primary);
  doc.setFont('helvetica', 'bold');
  doc.text('File Access', 20, yPos + 8);
  
  doc.setFontSize(9);
  doc.setTextColor(COLORS.text);
  doc.setFont('helvetica', 'normal');
  
  if (report.fileUrl) {
    doc.text(`• File URL: ${report.fileUrl}`, 20, yPos + 16);
    doc.text('• Access: Available online', 20, yPos + 22);
  } else {
    doc.text('• File URL: Not available', 20, yPos + 16);
    doc.text('• Access: Contact administrator', 20, yPos + 22);
  }

  // Footer
  const totalPages = (doc as any).internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(COLORS.secondary);
    doc.setFont('helvetica', 'italic');
    doc.text(
      `Page ${i} of ${totalPages}`,
      pageWidth / 2,
      pageHeight - 10,
      { align: 'center' }
    );
    doc.text(
      'ACCORD - Confidential',
      15,
      pageHeight - 10
    );
    doc.text(
      new Date().toLocaleDateString(),
      pageWidth - 15,
      pageHeight - 10,
      { align: 'right' }
    );
    
    // Signature lines
    if (i === totalPages && yPos + 40 < pageHeight - 20) {
      doc.setFontSize(9);
      doc.setTextColor(COLORS.text);
      doc.text('_________________________', 15, pageHeight - 30);
      doc.text('Reviewed by', 15, pageHeight - 24);
      
      doc.text('_________________________', pageWidth - 55, pageHeight - 30);
      doc.text('Date', pageWidth - 55, pageHeight - 24);
    }
  }

  // Save PDF
  const fileName = `ACCORD_Report_${report.userId.firstName}_${report.userId.lastName}_${new Date(report.weekStart).toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
}

/**
 * Helper function to load images
 */
function loadImage(url: string): Promise<string> {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = 'Anonymous';
    img.onload = () => {
      const canvas = document.createElement('canvas');
      canvas.width = img.width;
      canvas.height = img.height;
      const ctx = canvas.getContext('2d');
      if (ctx) {
        ctx.drawImage(img, 0, 0);
        resolve(canvas.toDataURL('image/png'));
      } else {
        reject(new Error('Failed to get canvas context'));
      }
    };
    img.onerror = () => reject(new Error('Failed to load image'));
    img.src = url;
  });
}
