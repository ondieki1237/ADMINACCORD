import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import type { Planner } from './plannerHelpers';
import { calculateWeeklyAllowance, formatWeekRange } from './plannerHelpers';

// ACCORD Brand Color scheme
const COLORS = {
  primary: '#008cf7', // ACCORD Blue
  secondary: '#6b7280', // Gray
  success: '#059669', // Green
  danger: '#dc2626', // Red
  text: '#000000', // Black
  lightGray: '#f3f4f6',
  border: '#e5e7eb',
  white: '#ffffff'
};

/**
 * Generate a PDF summary for all planners (admin overview)
 */
export async function generatePlannersSummaryPDF(
  planners: Planner[],
  weekRange: { from: Date; to: Date },
  adminName: string
): Promise<void> {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  
  // Add logo
  try {
    const logoImg = await loadImage('/accordlogo.png');
    doc.addImage(logoImg, 'PNG', 15, 10, 40, 20);
  } catch (error) {
    console.error('Failed to load logo:', error);
  }

  // Header - Company Info
  doc.setFontSize(20);
  doc.setTextColor(COLORS.primary);
  doc.setFont('helvetica', 'bold');
  doc.text('ACCORD', pageWidth - 15, 20, { align: 'right' });
  
  doc.setFontSize(10);
  doc.setTextColor(COLORS.secondary);
  doc.setFont('helvetica', 'normal');
  doc.text('Field Activity Management System', pageWidth - 15, 26, { align: 'right' });
  
  // Title
  doc.setFontSize(18);
  doc.setTextColor(COLORS.text);
  doc.setFont('helvetica', 'bold');
  doc.text('Weekly Planner Summary Report', 15, 45);
  
  // Divider line
  doc.setDrawColor(COLORS.primary);
  doc.setLineWidth(0.5);
  doc.line(15, 48, pageWidth - 15, 48);
  
  // Report metadata
  doc.setFontSize(10);
  doc.setTextColor(COLORS.secondary);
  doc.setFont('helvetica', 'normal');
  doc.text(`Week: ${formatWeekRange(weekRange.from.toISOString())}`, 15, 55);
  doc.text(`Generated: ${new Date().toLocaleString('en-US', { 
    dateStyle: 'medium', 
    timeStyle: 'short' 
  })}`, 15, 61);
  doc.text(`Generated by: ${adminName}`, 15, 67);
  doc.text(`Total Staff: ${planners.length}`, pageWidth - 15, 55, { align: 'right' });
  
  // Calculate total allowance
  const totalAllowance = planners.reduce((sum, p) => sum + calculateWeeklyAllowance(p), 0);
  doc.setFontSize(11);
  doc.setTextColor(COLORS.success);
  doc.setFont('helvetica', 'bold');
  doc.text(
    `Total Allowance: KES ${totalAllowance.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`,
    pageWidth - 15,
    61,
    { align: 'right' }
  );

  // Summary statistics box
  doc.setFillColor(COLORS.lightGray);
  doc.roundedRect(15, 73, pageWidth - 30, 25, 2, 2, 'F');
  
  doc.setFontSize(9);
  doc.setTextColor(COLORS.text);
  doc.setFont('helvetica', 'bold');
  
  const totalDays = planners.reduce((sum, p) => sum + p.days.length, 0);
  const avgAllowance = planners.length > 0 ? totalAllowance / planners.length : 0;
  
  doc.text('Key Metrics:', 20, 82);
  doc.setFont('helvetica', 'normal');
  doc.text(`• Total Planning Days: ${totalDays}`, 20, 88);
  doc.text(`• Average Allowance/Staff: KES ${avgAllowance.toLocaleString('en-KE', { maximumFractionDigits: 0 })}`, 20, 93);
  
  // Staff summary table
  let yPos = 105;
  
  doc.setFontSize(12);
  doc.setTextColor(COLORS.primary);
  doc.setFont('helvetica', 'bold');
  doc.text('Staff Weekly Planners', 15, yPos);
  
  yPos += 5;

  // Prepare table data
  const tableData = planners.map((planner, index) => {
    const weeklyAllowance = calculateWeeklyAllowance(planner);
    const daysCount = planner.days.length;
    const locations = planner.days.map(d => d.place).filter((v, i, a) => a.indexOf(v) === i).join(', ');
    
    return [
      (index + 1).toString(),
      `${planner.userId.firstName} ${planner.userId.lastName}`,
      planner.userId.employeeId,
      daysCount.toString(),
      `KES ${weeklyAllowance.toLocaleString('en-KE', { minimumFractionDigits: 0 })}`,
      locations.length > 30 ? locations.substring(0, 27) + '...' : locations
    ];
  });

  autoTable(doc, {
    startY: yPos,
    head: [['#', 'Staff Name', 'Employee ID', 'Days', 'Weekly Allowance', 'Key Locations']],
    body: tableData,
    theme: 'grid',
    headStyles: {
      fillColor: COLORS.primary,
      textColor: '#ffffff',
      fontSize: 9,
      fontStyle: 'bold',
      halign: 'left'
    },
    bodyStyles: {
      fontSize: 8,
      textColor: COLORS.text
    },
    alternateRowStyles: {
      fillColor: COLORS.lightGray
    },
    columnStyles: {
      0: { cellWidth: 10, halign: 'center' },
      1: { cellWidth: 40 },
      2: { cellWidth: 25 },
      3: { cellWidth: 15, halign: 'center' },
      4: { cellWidth: 35, halign: 'right' },
      5: { cellWidth: 'auto' }
    },
    margin: { left: 15, right: 15 }
  });

  // Footer on each page
  const totalPages = (doc as any).internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(COLORS.secondary);
    doc.setFont('helvetica', 'italic');
    doc.text(
      `Page ${i} of ${totalPages}`,
      pageWidth / 2,
      pageHeight - 10,
      { align: 'center' }
    );
    doc.text(
      'ACCORD - Confidential',
      15,
      pageHeight - 10
    );
    doc.text(
      new Date().toLocaleDateString(),
      pageWidth - 15,
      pageHeight - 10,
      { align: 'right' }
    );
  }

  // Save PDF
  const fileName = `ACCORD_Planner_Summary_${formatWeekRange(weekRange.from.toISOString()).replace(/\s+/g, '_')}.pdf`;
  doc.save(fileName);
}

/**
 * Generate detailed PDF report for a single user
 */
export async function generateIndividualPlannerPDF(
  planner: Planner,
  weekRange: { from: Date; to: Date },
  adminName: string
): Promise<void> {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  
  // Add logo
  try {
    const logoImg = await loadImage('/accordlogo.png');
    doc.addImage(logoImg, 'PNG', 15, 10, 40, 20);
  } catch (error) {
    console.error('Failed to load logo:', error);
  }

  // Header
  doc.setFontSize(20);
  doc.setTextColor(COLORS.primary);
  doc.setFont('helvetica', 'bold');
  doc.text('ACCORD', pageWidth - 15, 20, { align: 'right' });
  
  doc.setFontSize(10);
  doc.setTextColor(COLORS.secondary);
  doc.setFont('helvetica', 'normal');
  doc.text('Field Activity Management System', pageWidth - 15, 26, { align: 'right' });
  
  // Title
  doc.setFontSize(18);
  doc.setTextColor(COLORS.text);
  doc.setFont('helvetica', 'bold');
  doc.text('Individual Weekly Planner', 15, 45);
  
  // Divider
  doc.setDrawColor(COLORS.primary);
  doc.setLineWidth(0.5);
  doc.line(15, 48, pageWidth - 15, 48);
  
  // Staff information box
  doc.setFillColor(COLORS.primary);
  doc.roundedRect(15, 55, pageWidth - 30, 30, 2, 2, 'F');
  
  doc.setFontSize(14);
  doc.setTextColor('#ffffff');
  doc.setFont('helvetica', 'bold');
  doc.text(
    `${planner.userId.firstName} ${planner.userId.lastName}`,
    20,
    65
  );
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Employee ID: ${planner.userId.employeeId}`, 20, 72);
  doc.text(`Email: ${planner.userId.email}`, 20, 78);
  doc.text(
    `Week: ${formatWeekRange(weekRange.from.toISOString())}`,
    pageWidth - 20,
    65,
    { align: 'right' }
  );
  
  const weeklyAllowance = calculateWeeklyAllowance(planner);
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text(
    `Total Allowance: KES ${weeklyAllowance.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`,
    pageWidth - 20,
    78,
    { align: 'right' }
  );

  // Report metadata
  let yPos = 95;
  doc.setFontSize(9);
  doc.setTextColor(COLORS.secondary);
  doc.setFont('helvetica', 'normal');
  doc.text(`Generated: ${new Date().toLocaleString('en-US', { dateStyle: 'medium', timeStyle: 'short' })}`, 15, yPos);
  doc.text(`Generated by: ${adminName}`, pageWidth - 15, yPos, { align: 'right' });

  // Notes section (if available)
  if (planner.notes && planner.notes.trim()) {
    yPos += 10;
    const notesHeight = 25; // Fixed height for notes box
    doc.setFillColor(COLORS.lightGray);
    doc.roundedRect(15, yPos, pageWidth - 30, notesHeight, 2, 2, 'F');
    
    doc.setFontSize(10);
    doc.setTextColor(COLORS.text);
    doc.setFont('helvetica', 'bold');
    doc.text('Weekly Notes:', 20, yPos + 7);
    
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(9);
    const splitNotes = doc.splitTextToSize(planner.notes, pageWidth - 40);
    doc.text(splitNotes, 20, yPos + 14);
    yPos += notesHeight + 5;
  } else {
    yPos += 5;
  }

  // Daily schedule section
  yPos += 10;
  doc.setFontSize(12);
  doc.setTextColor(COLORS.primary);
  doc.setFont('helvetica', 'bold');
  doc.text('5-Day Weekly Schedule', 15, yPos);
  
  yPos += 5;

  // Create detailed table for each day
  const tableData = planner.days.map((day, index) => {
    const allowance = parseFloat(day.allowance) || 0;
    return [
      day.day,
      new Date(day.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
      day.place,
      day.means,
      `KES ${allowance.toLocaleString('en-KE', { minimumFractionDigits: 0 })}`,
      day.prospects || 'N/A'
    ];
  });

  autoTable(doc, {
    startY: yPos,
    head: [['Day', 'Date', 'Location/Place', 'Transport Mode', 'Allowance', 'Prospects/Targets']],
    body: tableData,
    theme: 'grid',
    headStyles: {
      fillColor: COLORS.primary,
      textColor: COLORS.white,
      fontSize: 9,
      fontStyle: 'bold',
      halign: 'left'
    },
    bodyStyles: {
      fontSize: 9,
      textColor: COLORS.text,
      cellPadding: 4
    },
    alternateRowStyles: {
      fillColor: COLORS.lightGray
    },
    columnStyles: {
      0: { cellWidth: 22, fontStyle: 'bold' },
      1: { cellWidth: 28 },
      2: { cellWidth: 38 },
      3: { cellWidth: 28 },
      4: { cellWidth: 28, halign: 'right', fontStyle: 'bold', textColor: COLORS.success },
      5: { cellWidth: 'auto' }
    },
    margin: { left: 15, right: 15 }
  });

  // Get position after table
  yPos = (doc as any).lastAutoTable.finalY + 15;

  // Summary statistics
  if (yPos + 40 > pageHeight - 20) {
    doc.addPage();
    yPos = 20;
  }

  doc.setFillColor(COLORS.lightGray);
  doc.roundedRect(15, yPos, pageWidth - 30, 35, 2, 2, 'F');
  
  doc.setFontSize(11);
  doc.setTextColor(COLORS.primary);
  doc.setFont('helvetica', 'bold');
  doc.text('Summary Statistics', 20, yPos + 8);
  
  doc.setFontSize(9);
  doc.setTextColor(COLORS.text);
  doc.setFont('helvetica', 'normal');
  
  const uniqueLocations = [...new Set(planner.days.map(d => d.place))];
  const uniqueMeans = [...new Set(planner.days.map(d => d.means))];
  const avgDailyAllowance = weeklyAllowance / planner.days.length;
  
  doc.text(`• Total Working Days: ${planner.days.length}`, 20, yPos + 16);
  doc.text(`• Unique Locations: ${uniqueLocations.length} (${uniqueLocations.join(', ')})`, 20, yPos + 22);
  doc.text(`• Transport Modes: ${uniqueMeans.join(', ')}`, 20, yPos + 28);
  doc.text(
    `• Average Daily Allowance: KES ${avgDailyAllowance.toLocaleString('en-KE', { minimumFractionDigits: 0 })}`,
    20,
    yPos + 34
  );

  // Footer
  const totalPages = (doc as any).internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(COLORS.secondary);
    doc.setFont('helvetica', 'italic');
    doc.text(
      `Page ${i} of ${totalPages}`,
      pageWidth / 2,
      pageHeight - 10,
      { align: 'center' }
    );
    doc.text(
      'ACCORD - Confidential',
      15,
      pageHeight - 10
    );
    doc.text(
      new Date().toLocaleDateString(),
      pageWidth - 15,
      pageHeight - 10,
      { align: 'right' }
    );
    
    // Staff signature line
    if (i === totalPages && yPos + 50 < pageHeight - 20) {
      doc.setFontSize(9);
      doc.setTextColor(COLORS.text);
      doc.text('_________________________', 15, pageHeight - 30);
      doc.text('Staff Signature', 15, pageHeight - 24);
      
      doc.text('_________________________', pageWidth - 55, pageHeight - 30);
      doc.text('Supervisor Approval', pageWidth - 55, pageHeight - 24);
    }
  }

  // Save PDF
  const fileName = `ACCORD_Planner_${planner.userId.firstName}_${planner.userId.lastName}_${formatWeekRange(weekRange.from.toISOString()).replace(/\s+/g, '_')}.pdf`;
  doc.save(fileName);
}

/**
 * Helper function to load images
 */
function loadImage(url: string): Promise<string> {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = 'Anonymous';
    img.onload = () => {
      const canvas = document.createElement('canvas');
      canvas.width = img.width;
      canvas.height = img.height;
      const ctx = canvas.getContext('2d');
      if (ctx) {
        ctx.drawImage(img, 0, 0);
        resolve(canvas.toDataURL('image/png'));
      } else {
        reject(new Error('Failed to get canvas context'));
      }
    };
    img.onerror = () => reject(new Error('Failed to load image'));
    img.src = url;
  });
}
